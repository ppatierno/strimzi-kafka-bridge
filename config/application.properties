#Bridge related settings
bridge.id=my-bridge
# uncomment the following line (bridge.tracing) to enable OpenTelemetry tracing, check the documentation how to configure the tracer
# OpenTelemetry support
#bridge.tracing=opentelemetry

#Apache Kafka common
kafka.bootstrap.servers=localhost:9092

#Apache Kafka producer
kafka.producer.acks=1

#Apache Kafka consumer
kafka.consumer.auto.offset.reset=earliest

#HTTP related settings
http.host=0.0.0.0
http.port=8080
#Enable CORS
http.cors.enabled=false
http.cors.allowedOrigins=*
http.cors.allowedMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH

#Enable consumer
http.consumer.enabled=true

#Enable producer
http.producer.enabled=true

#Quarkus related configuration
quarkus.application.name=strimzi-kafka-bridge

#Logging
quarkus.log.category."http.openapi.operation.healthy".level=WARN
quarkus.log.category."http.openapi.operation.ready".level=DEBUG

#WARNING: don't change this following configuration.

#OpenTelemetry support
#It's done so that you can rely on the usual way to configure OpenTelemetry by setting OTEL_SERVICE_NAME and OTEL_EXPORTER_OTLP_ENDPOINT environment variables
#using OTEL_SERVICE_NAME as usual or a preformatted service name based on the bridge.id
quarkus.opentelemetry.tracer.resource-attributes=service.name=${OTEL_SERVICE_NAME:strimzi-kafka-bridge-${bridge.id}}
#if the OTEL_EXPORTER_OTLP_ENDPOINT, it's using http://localhost:4317 by default
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT}

#This property is required to allow scheduling the periodic task programmatically(i.e. inactive consumers check)
quarkus.quartz.start-mode=forced

#This property is required to set the predefined headers
quarkus.http.cors.headers=x-requested-with,x-forwarded-proto,x-forwarded-host,access-control-allow-origin,access-control-allow-methods,origin,content-type,content-length,accept

# Quarkus property to disable default prometheus registry
quarkus.micrometer.export.prometheus.default-registry=false

# Quarkus property used to set the prometheus metrics endpoint
quarkus.micrometer.export.prometheus.path=/metrics